// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: apple/swift_homomorphic_encryption/api/v1/api_pir.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2024 Apple Inc. and the Swift Homomorphic Encryption project authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

import HomomorphicEncryptionProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Configuration for one shard of the PIR database.
public struct Apple_SwiftHomomorphicEncryption_Api_V1_PIRShardConfig: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Number of entries in the shard.
  public var numEntries: UInt64 = 0

  /// Size in bytes of entries in the shard.
  public var entrySize: UInt64 = 0

  /// Dimensions that make up the hypercube.
  public var dimensions: [UInt64] = []

  /// Unique identifier for the shard.
  public var shardID: String {
    get {return _shardID ?? String()}
    set {_shardID = newValue}
  }
  /// Returns true if `shardID` has been explicitly set.
  public var hasShardID: Bool {return self._shardID != nil}
  /// Clears the value of `shardID`. Subsequent reads from it will return its default value.
  public mutating func clearShardID() {self._shardID = nil}

  /// Whether to compress vectorized PIR response.
  public var compressVectorizedPirResponse: Bool {
    get {return _compressVectorizedPirResponse ?? false}
    set {_compressVectorizedPirResponse = newValue}
  }
  /// Returns true if `compressVectorizedPirResponse` has been explicitly set.
  public var hasCompressVectorizedPirResponse: Bool {return self._compressVectorizedPirResponse != nil}
  /// Clears the value of `compressVectorizedPirResponse`. Subsequent reads from it will return its default value.
  public mutating func clearCompressVectorizedPirResponse() {self._compressVectorizedPirResponse = nil}

  /// The additional "batching" introduced in vectorized pir to accommodate large entry size.
  public var vectorizedPirInternalBatchingSize: UInt64 {
    get {return _vectorizedPirInternalBatchingSize ?? 0}
    set {_vectorizedPirInternalBatchingSize = newValue}
  }
  /// Returns true if `vectorizedPirInternalBatchingSize` has been explicitly set.
  public var hasVectorizedPirInternalBatchingSize: Bool {return self._vectorizedPirInternalBatchingSize != nil}
  /// Clears the value of `vectorizedPirInternalBatchingSize`. Subsequent reads from it will return its default value.
  public mutating func clearVectorizedPirInternalBatchingSize() {self._vectorizedPirInternalBatchingSize = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _shardID: String? = nil
  fileprivate var _compressVectorizedPirResponse: Bool? = nil
  fileprivate var _vectorizedPirInternalBatchingSize: UInt64? = nil
}

/// Configuration for one PIR usecase.
public struct Apple_SwiftHomomorphicEncryption_Api_V1_PIRConfig: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Encryption parameters.
  public var encryptionParameters: HomomorphicEncryptionProtobuf.Apple_SwiftHomomorphicEncryption_V1_EncryptionParameters {
    get {return _encryptionParameters ?? HomomorphicEncryptionProtobuf.Apple_SwiftHomomorphicEncryption_V1_EncryptionParameters()}
    set {_encryptionParameters = newValue}
  }
  /// Returns true if `encryptionParameters` has been explicitly set.
  public var hasEncryptionParameters: Bool {return self._encryptionParameters != nil}
  /// Clears the value of `encryptionParameters`. Subsequent reads from it will return its default value.
  public mutating func clearEncryptionParameters() {self._encryptionParameters = nil}

  /// Configuration for each shard.
  public var shardConfigs: [Apple_SwiftHomomorphicEncryption_Api_V1_PIRShardConfig] = []

  /// Parameters specific to KeywordPIR.
  public var keywordPirParams: Apple_SwiftHomomorphicEncryption_Pir_V1_KeywordPirParameters {
    get {return _keywordPirParams ?? Apple_SwiftHomomorphicEncryption_Pir_V1_KeywordPirParameters()}
    set {_keywordPirParams = newValue}
  }
  /// Returns true if `keywordPirParams` has been explicitly set.
  public var hasKeywordPirParams: Bool {return self._keywordPirParams != nil}
  /// Clears the value of `keywordPirParams`. Subsequent reads from it will return its default value.
  public mutating func clearKeywordPirParams() {self._keywordPirParams = nil}

  /// Server-side PIR algorithm.
  public var algorithm: Apple_SwiftHomomorphicEncryption_Pir_V1_PirAlgorithm = .aclsPir

  /// Maximum number of queries allowed in a single request.
  public var batchSize: UInt64 = 0

  /// Hash of EvaluationKeyConfig.
  public var evaluationKeyConfigHash: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _encryptionParameters: HomomorphicEncryptionProtobuf.Apple_SwiftHomomorphicEncryption_V1_EncryptionParameters? = nil
  fileprivate var _keywordPirParams: Apple_SwiftHomomorphicEncryption_Pir_V1_KeywordPirParameters? = nil
}

/// PIR Request.
public struct Apple_SwiftHomomorphicEncryption_Api_V1_PIRRequest: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Shard index where this request should be routed. Can be overridden by shard_id.
  public var shardIndex: UInt32 = 0

  /// Encrypted query.
  public var query: Apple_SwiftHomomorphicEncryption_Pir_V1_EncryptedIndices {
    get {return _query ?? Apple_SwiftHomomorphicEncryption_Pir_V1_EncryptedIndices()}
    set {_query = newValue}
  }
  /// Returns true if `query` has been explicitly set.
  public var hasQuery: Bool {return self._query != nil}
  /// Clears the value of `query`. Subsequent reads from it will return its default value.
  public mutating func clearQuery() {self._query = nil}

  /// Evaluation key metadata.
  public var evaluationKeyMetadata: Apple_SwiftHomomorphicEncryption_Api_V1_EvaluationKeyMetadata {
    get {return _evaluationKeyMetadata ?? Apple_SwiftHomomorphicEncryption_Api_V1_EvaluationKeyMetadata()}
    set {_evaluationKeyMetadata = newValue}
  }
  /// Returns true if `evaluationKeyMetadata` has been explicitly set.
  public var hasEvaluationKeyMetadata: Bool {return self._evaluationKeyMetadata != nil}
  /// Clears the value of `evaluationKeyMetadata`. Subsequent reads from it will return its default value.
  public mutating func clearEvaluationKeyMetadata() {self._evaluationKeyMetadata = nil}

  /// Hash of the `PIRConfig` used to construct the query.
  public var configurationHash: Data = Data()

  /// If set, route request to a shard with this `shard_id` instead of `shard_index`.
  public var shardID: String {
    get {return _shardID ?? String()}
    set {_shardID = newValue}
  }
  /// Returns true if `shardID` has been explicitly set.
  public var hasShardID: Bool {return self._shardID != nil}
  /// Clears the value of `shardID`. Subsequent reads from it will return its default value.
  public mutating func clearShardID() {self._shardID = nil}

  /// If set, evaluation key to query with. Will override evaluation key stored server-side.
  public var evaluationKey: Apple_SwiftHomomorphicEncryption_Api_V1_EvaluationKey {
    get {return _evaluationKey ?? Apple_SwiftHomomorphicEncryption_Api_V1_EvaluationKey()}
    set {_evaluationKey = newValue}
  }
  /// Returns true if `evaluationKey` has been explicitly set.
  public var hasEvaluationKey: Bool {return self._evaluationKey != nil}
  /// Clears the value of `evaluationKey`. Subsequent reads from it will return its default value.
  public mutating func clearEvaluationKey() {self._evaluationKey = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _query: Apple_SwiftHomomorphicEncryption_Pir_V1_EncryptedIndices? = nil
  fileprivate var _evaluationKeyMetadata: Apple_SwiftHomomorphicEncryption_Api_V1_EvaluationKeyMetadata? = nil
  fileprivate var _shardID: String? = nil
  fileprivate var _evaluationKey: Apple_SwiftHomomorphicEncryption_Api_V1_EvaluationKey? = nil
}

/// PIR Response.
public struct Apple_SwiftHomomorphicEncryption_Api_V1_PIRResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Encrypted replies, each of which is a ciphertext vector.
  public var replies: [HomomorphicEncryptionProtobuf.Apple_SwiftHomomorphicEncryption_V1_SerializedCiphertextVec] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "apple.swift_homomorphic_encryption.api.v1"

extension Apple_SwiftHomomorphicEncryption_Api_V1_PIRShardConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PIRShardConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "num_entries"),
    2: .standard(proto: "entry_size"),
    3: .same(proto: "dimensions"),
    4: .standard(proto: "shard_id"),
    5: .standard(proto: "compress_vectorized_pir_response"),
    6: .standard(proto: "vectorized_pir_internal_batching_size"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.numEntries) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.entrySize) }()
      case 3: try { try decoder.decodeRepeatedUInt64Field(value: &self.dimensions) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._shardID) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self._compressVectorizedPirResponse) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self._vectorizedPirInternalBatchingSize) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.numEntries != 0 {
      try visitor.visitSingularUInt64Field(value: self.numEntries, fieldNumber: 1)
    }
    if self.entrySize != 0 {
      try visitor.visitSingularUInt64Field(value: self.entrySize, fieldNumber: 2)
    }
    if !self.dimensions.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.dimensions, fieldNumber: 3)
    }
    try { if let v = self._shardID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._compressVectorizedPirResponse {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._vectorizedPirInternalBatchingSize {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Apple_SwiftHomomorphicEncryption_Api_V1_PIRShardConfig, rhs: Apple_SwiftHomomorphicEncryption_Api_V1_PIRShardConfig) -> Bool {
    if lhs.numEntries != rhs.numEntries {return false}
    if lhs.entrySize != rhs.entrySize {return false}
    if lhs.dimensions != rhs.dimensions {return false}
    if lhs._shardID != rhs._shardID {return false}
    if lhs._compressVectorizedPirResponse != rhs._compressVectorizedPirResponse {return false}
    if lhs._vectorizedPirInternalBatchingSize != rhs._vectorizedPirInternalBatchingSize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apple_SwiftHomomorphicEncryption_Api_V1_PIRConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PIRConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "encryption_parameters"),
    2: .standard(proto: "shard_configs"),
    3: .standard(proto: "keyword_pir_params"),
    4: .same(proto: "algorithm"),
    5: .standard(proto: "batch_size"),
    6: .standard(proto: "evaluation_key_config_hash"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._encryptionParameters) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.shardConfigs) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._keywordPirParams) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.algorithm) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.batchSize) }()
      case 6: try { try decoder.decodeSingularBytesField(value: &self.evaluationKeyConfigHash) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._encryptionParameters {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.shardConfigs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.shardConfigs, fieldNumber: 2)
    }
    try { if let v = self._keywordPirParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if self.algorithm != .aclsPir {
      try visitor.visitSingularEnumField(value: self.algorithm, fieldNumber: 4)
    }
    if self.batchSize != 0 {
      try visitor.visitSingularUInt64Field(value: self.batchSize, fieldNumber: 5)
    }
    if !self.evaluationKeyConfigHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.evaluationKeyConfigHash, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Apple_SwiftHomomorphicEncryption_Api_V1_PIRConfig, rhs: Apple_SwiftHomomorphicEncryption_Api_V1_PIRConfig) -> Bool {
    if lhs._encryptionParameters != rhs._encryptionParameters {return false}
    if lhs.shardConfigs != rhs.shardConfigs {return false}
    if lhs._keywordPirParams != rhs._keywordPirParams {return false}
    if lhs.algorithm != rhs.algorithm {return false}
    if lhs.batchSize != rhs.batchSize {return false}
    if lhs.evaluationKeyConfigHash != rhs.evaluationKeyConfigHash {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apple_SwiftHomomorphicEncryption_Api_V1_PIRRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PIRRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "shard_index"),
    2: .same(proto: "query"),
    3: .standard(proto: "evaluation_key_metadata"),
    4: .standard(proto: "configuration_hash"),
    5: .standard(proto: "shard_id"),
    6: .standard(proto: "evaluation_key"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.shardIndex) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._query) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._evaluationKeyMetadata) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.configurationHash) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._shardID) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._evaluationKey) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.shardIndex != 0 {
      try visitor.visitSingularUInt32Field(value: self.shardIndex, fieldNumber: 1)
    }
    try { if let v = self._query {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._evaluationKeyMetadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.configurationHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.configurationHash, fieldNumber: 4)
    }
    try { if let v = self._shardID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._evaluationKey {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Apple_SwiftHomomorphicEncryption_Api_V1_PIRRequest, rhs: Apple_SwiftHomomorphicEncryption_Api_V1_PIRRequest) -> Bool {
    if lhs.shardIndex != rhs.shardIndex {return false}
    if lhs._query != rhs._query {return false}
    if lhs._evaluationKeyMetadata != rhs._evaluationKeyMetadata {return false}
    if lhs.configurationHash != rhs.configurationHash {return false}
    if lhs._shardID != rhs._shardID {return false}
    if lhs._evaluationKey != rhs._evaluationKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apple_SwiftHomomorphicEncryption_Api_V1_PIRResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PIRResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "replies"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.replies) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.replies.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.replies, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Apple_SwiftHomomorphicEncryption_Api_V1_PIRResponse, rhs: Apple_SwiftHomomorphicEncryption_Api_V1_PIRResponse) -> Bool {
    if lhs.replies != rhs.replies {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
