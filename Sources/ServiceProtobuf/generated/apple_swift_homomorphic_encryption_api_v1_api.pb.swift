// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: apple/swift_homomorphic_encryption/api/v1/api.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2024-2025 Apple Inc. and the Swift Homomorphic Encryption project authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Request for server side configurations.
public struct Apple_SwiftHomomorphicEncryption_Api_V1_ConfigRequest: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// List of usecases to fetch configs for.
  /// When set to empty array, all configs will be returned.
  public var usecases: [String] = []

  /// For each usecase, the existing config id, if one exists.
  public var existingConfigIds: [Data] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Usecase configuration.
public struct Apple_SwiftHomomorphicEncryption_Api_V1_Config: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Configuration.
  public var config: Apple_SwiftHomomorphicEncryption_Api_V1_Config.OneOf_Config? = nil

  /// Configuration for a PIR usecase.
  public var pirConfig: Apple_SwiftHomomorphicEncryption_Api_Pir_V1_PIRConfig {
    get {
      if case .pirConfig(let v)? = config {return v}
      return Apple_SwiftHomomorphicEncryption_Api_Pir_V1_PIRConfig()
    }
    set {config = .pirConfig(newValue)}
  }

  /// Configuration for a PNNS usecase.
  public var pnnsConfig: Apple_SwiftHomomorphicEncryption_Api_Pnns_V1_PNNSConfig {
    get {
      if case .pnnsConfig(let v)? = config {return v}
      return Apple_SwiftHomomorphicEncryption_Api_Pnns_V1_PNNSConfig()
    }
    set {config = .pnnsConfig(newValue)}
  }

  /// Unique identifier for the configuration.
  public var configID: Data = Data()

  /// Indicator that the config is the same config as in the ConfigRequest. If set, all other fields can be unset.
  public var reuseExistingConfig: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Configuration.
  public enum OneOf_Config: Equatable, Sendable {
    /// Configuration for a PIR usecase.
    case pirConfig(Apple_SwiftHomomorphicEncryption_Api_Pir_V1_PIRConfig)
    /// Configuration for a PNNS usecase.
    case pnnsConfig(Apple_SwiftHomomorphicEncryption_Api_Pnns_V1_PNNSConfig)

  }

  public init() {}
}

/// Server side configurations.
public struct Apple_SwiftHomomorphicEncryption_Api_V1_ConfigResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// usecases with associated configurations.
  public var configs: Dictionary<String,Apple_SwiftHomomorphicEncryption_Api_V1_Config> = [:]

  /// Configuration & status of evaluation keys.
  public var keyInfo: [Apple_SwiftHomomorphicEncryption_Api_Shared_V1_KeyStatus] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Container for multiple requests.
public struct Apple_SwiftHomomorphicEncryption_Api_V1_Requests: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Requests.
  public var requests: [Apple_SwiftHomomorphicEncryption_Api_V1_Request] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Container for multiple responses.
public struct Apple_SwiftHomomorphicEncryption_Api_V1_Responses: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Responses.
  public var responses: [Apple_SwiftHomomorphicEncryption_Api_V1_Response] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Generic request.
public struct Apple_SwiftHomomorphicEncryption_Api_V1_Request: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Usecase identifier.
  public var usecase: String = String()

  /// Generic request.
  public var request: Apple_SwiftHomomorphicEncryption_Api_V1_Request.OneOf_Request? = nil

  /// PIR request.
  public var pirRequest: Apple_SwiftHomomorphicEncryption_Api_Pir_V1_PIRRequest {
    get {
      if case .pirRequest(let v)? = request {return v}
      return Apple_SwiftHomomorphicEncryption_Api_Pir_V1_PIRRequest()
    }
    set {request = .pirRequest(newValue)}
  }

  /// PNNS request.
  public var pnnsRequest: Apple_SwiftHomomorphicEncryption_Api_Pnns_V1_PNNSRequest {
    get {
      if case .pnnsRequest(let v)? = request {return v}
      return Apple_SwiftHomomorphicEncryption_Api_Pnns_V1_PNNSRequest()
    }
    set {request = .pnnsRequest(newValue)}
  }

  /// OPRF request.
  public var oprfRequest: Apple_SwiftHomomorphicEncryption_Api_Pir_V1_OPRFRequest {
    get {
      if case .oprfRequest(let v)? = request {return v}
      return Apple_SwiftHomomorphicEncryption_Api_Pir_V1_OPRFRequest()
    }
    set {request = .oprfRequest(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Generic request.
  public enum OneOf_Request: Equatable, Sendable {
    /// PIR request.
    case pirRequest(Apple_SwiftHomomorphicEncryption_Api_Pir_V1_PIRRequest)
    /// PNNS request.
    case pnnsRequest(Apple_SwiftHomomorphicEncryption_Api_Pnns_V1_PNNSRequest)
    /// OPRF request.
    case oprfRequest(Apple_SwiftHomomorphicEncryption_Api_Pir_V1_OPRFRequest)

  }

  public init() {}
}

/// Generic response.
public struct Apple_SwiftHomomorphicEncryption_Api_V1_Response: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Generic response.
  public var response: Apple_SwiftHomomorphicEncryption_Api_V1_Response.OneOf_Response? = nil

  /// Response to a `PIRRequest`.
  public var pirResponse: Apple_SwiftHomomorphicEncryption_Api_Pir_V1_PIRResponse {
    get {
      if case .pirResponse(let v)? = response {return v}
      return Apple_SwiftHomomorphicEncryption_Api_Pir_V1_PIRResponse()
    }
    set {response = .pirResponse(newValue)}
  }

  /// Response to a `PNNSRequest`.
  public var pnnsResponse: Apple_SwiftHomomorphicEncryption_Api_Pnns_V1_PNNSResponse {
    get {
      if case .pnnsResponse(let v)? = response {return v}
      return Apple_SwiftHomomorphicEncryption_Api_Pnns_V1_PNNSResponse()
    }
    set {response = .pnnsResponse(newValue)}
  }

  /// Response to `OPRFRequest`.
  public var oprfResponse: Apple_SwiftHomomorphicEncryption_Api_Pir_V1_OPRFResponse {
    get {
      if case .oprfResponse(let v)? = response {return v}
      return Apple_SwiftHomomorphicEncryption_Api_Pir_V1_OPRFResponse()
    }
    set {response = .oprfResponse(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Generic response.
  public enum OneOf_Response: Equatable, Sendable {
    /// Response to a `PIRRequest`.
    case pirResponse(Apple_SwiftHomomorphicEncryption_Api_Pir_V1_PIRResponse)
    /// Response to a `PNNSRequest`.
    case pnnsResponse(Apple_SwiftHomomorphicEncryption_Api_Pnns_V1_PNNSResponse)
    /// Response to `OPRFRequest`.
    case oprfResponse(Apple_SwiftHomomorphicEncryption_Api_Pir_V1_OPRFResponse)

  }

  public init() {}
}

/// Error returned by failed API calls.
public struct Apple_SwiftHomomorphicEncryption_Api_V1_Error: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Type of error encountered while processing request.
  public var errorType: Apple_SwiftHomomorphicEncryption_Api_V1_Error.OneOf_ErrorType? = nil

  /// Client configuration not found.
  public var configVersionNotFound: Apple_SwiftHomomorphicEncryption_Api_V1_Error.ConfigVersionNotFound {
    get {
      if case .configVersionNotFound(let v)? = errorType {return v}
      return Apple_SwiftHomomorphicEncryption_Api_V1_Error.ConfigVersionNotFound()
    }
    set {errorType = .configVersionNotFound(newValue)}
  }

  /// Client evaluation key not found.
  public var evaluationKeyNotFound: Apple_SwiftHomomorphicEncryption_Api_V1_Error.EvaluationKeyNotFound {
    get {
      if case .evaluationKeyNotFound(let v)? = errorType {return v}
      return Apple_SwiftHomomorphicEncryption_Api_V1_Error.EvaluationKeyNotFound()
    }
    set {errorType = .evaluationKeyNotFound(newValue)}
  }

  /// Request can not be parsed.
  public var invalidRequest: Apple_SwiftHomomorphicEncryption_Api_V1_Error.InvalidRequest {
    get {
      if case .invalidRequest(let v)? = errorType {return v}
      return Apple_SwiftHomomorphicEncryption_Api_V1_Error.InvalidRequest()
    }
    set {errorType = .invalidRequest(newValue)}
  }

  /// Internal error.
  public var internalError: Apple_SwiftHomomorphicEncryption_Api_V1_Error.InternalError {
    get {
      if case .internalError(let v)? = errorType {return v}
      return Apple_SwiftHomomorphicEncryption_Api_V1_Error.InternalError()
    }
    set {errorType = .internalError(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Type of error encountered while processing request.
  public enum OneOf_ErrorType: Equatable, Sendable {
    /// Client configuration not found.
    case configVersionNotFound(Apple_SwiftHomomorphicEncryption_Api_V1_Error.ConfigVersionNotFound)
    /// Client evaluation key not found.
    case evaluationKeyNotFound(Apple_SwiftHomomorphicEncryption_Api_V1_Error.EvaluationKeyNotFound)
    /// Request can not be parsed.
    case invalidRequest(Apple_SwiftHomomorphicEncryption_Api_V1_Error.InvalidRequest)
    /// Internal error.
    case internalError(Apple_SwiftHomomorphicEncryption_Api_V1_Error.InternalError)

  }

  /// Client configuration not found.
  ///
  /// Client should retry after fetching new configuration. May include new configuration
  /// in `config_response`. In this case, client should use this returned configuration and retry.
  public struct ConfigVersionNotFound: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// ConfigResponse that client should use for subsequent requests.
    public var configResponse: Apple_SwiftHomomorphicEncryption_Api_V1_ConfigResponse {
      get {return _configResponse ?? Apple_SwiftHomomorphicEncryption_Api_V1_ConfigResponse()}
      set {_configResponse = newValue}
    }
    /// Returns true if `configResponse` has been explicitly set.
    public var hasConfigResponse: Bool {return self._configResponse != nil}
    /// Clears the value of `configResponse`. Subsequent reads from it will return its default value.
    public mutating func clearConfigResponse() {self._configResponse = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _configResponse: Apple_SwiftHomomorphicEncryption_Api_V1_ConfigResponse? = nil
  }

  /// Evaluation key not found.
  ///
  /// Client should upload evaluation key and retry.
  public struct EvaluationKeyNotFound: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Request can not be parsed successfully.
  public struct InvalidRequest: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Internal error.
  public struct InternalError: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "apple.swift_homomorphic_encryption.api.v1"

extension Apple_SwiftHomomorphicEncryption_Api_V1_ConfigRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ConfigRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "usecases"),
    2: .standard(proto: "existing_config_ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.usecases) }()
      case 2: try { try decoder.decodeRepeatedBytesField(value: &self.existingConfigIds) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.usecases.isEmpty {
      try visitor.visitRepeatedStringField(value: self.usecases, fieldNumber: 1)
    }
    if !self.existingConfigIds.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.existingConfigIds, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Apple_SwiftHomomorphicEncryption_Api_V1_ConfigRequest, rhs: Apple_SwiftHomomorphicEncryption_Api_V1_ConfigRequest) -> Bool {
    if lhs.usecases != rhs.usecases {return false}
    if lhs.existingConfigIds != rhs.existingConfigIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apple_SwiftHomomorphicEncryption_Api_V1_Config: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Config"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pir_config"),
    2: .standard(proto: "pnns_config"),
    3: .standard(proto: "config_id"),
    4: .standard(proto: "reuse_existing_config"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Apple_SwiftHomomorphicEncryption_Api_Pir_V1_PIRConfig?
        var hadOneofValue = false
        if let current = self.config {
          hadOneofValue = true
          if case .pirConfig(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.config = .pirConfig(v)
        }
      }()
      case 2: try {
        var v: Apple_SwiftHomomorphicEncryption_Api_Pnns_V1_PNNSConfig?
        var hadOneofValue = false
        if let current = self.config {
          hadOneofValue = true
          if case .pnnsConfig(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.config = .pnnsConfig(v)
        }
      }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.configID) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.reuseExistingConfig) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.config {
    case .pirConfig?: try {
      guard case .pirConfig(let v)? = self.config else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .pnnsConfig?: try {
      guard case .pnnsConfig(let v)? = self.config else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    if !self.configID.isEmpty {
      try visitor.visitSingularBytesField(value: self.configID, fieldNumber: 3)
    }
    if self.reuseExistingConfig != false {
      try visitor.visitSingularBoolField(value: self.reuseExistingConfig, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Apple_SwiftHomomorphicEncryption_Api_V1_Config, rhs: Apple_SwiftHomomorphicEncryption_Api_V1_Config) -> Bool {
    if lhs.config != rhs.config {return false}
    if lhs.configID != rhs.configID {return false}
    if lhs.reuseExistingConfig != rhs.reuseExistingConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apple_SwiftHomomorphicEncryption_Api_V1_ConfigResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ConfigResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "configs"),
    2: .standard(proto: "key_info"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Apple_SwiftHomomorphicEncryption_Api_V1_Config>.self, value: &self.configs) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.keyInfo) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.configs.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Apple_SwiftHomomorphicEncryption_Api_V1_Config>.self, value: self.configs, fieldNumber: 1)
    }
    if !self.keyInfo.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.keyInfo, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Apple_SwiftHomomorphicEncryption_Api_V1_ConfigResponse, rhs: Apple_SwiftHomomorphicEncryption_Api_V1_ConfigResponse) -> Bool {
    if lhs.configs != rhs.configs {return false}
    if lhs.keyInfo != rhs.keyInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apple_SwiftHomomorphicEncryption_Api_V1_Requests: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Requests"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "requests"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.requests) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.requests.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.requests, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Apple_SwiftHomomorphicEncryption_Api_V1_Requests, rhs: Apple_SwiftHomomorphicEncryption_Api_V1_Requests) -> Bool {
    if lhs.requests != rhs.requests {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apple_SwiftHomomorphicEncryption_Api_V1_Responses: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Responses"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "responses"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.responses) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.responses.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.responses, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Apple_SwiftHomomorphicEncryption_Api_V1_Responses, rhs: Apple_SwiftHomomorphicEncryption_Api_V1_Responses) -> Bool {
    if lhs.responses != rhs.responses {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apple_SwiftHomomorphicEncryption_Api_V1_Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "usecase"),
    2: .standard(proto: "pir_request"),
    3: .standard(proto: "pnns_request"),
    4: .standard(proto: "oprf_request"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.usecase) }()
      case 2: try {
        var v: Apple_SwiftHomomorphicEncryption_Api_Pir_V1_PIRRequest?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .pirRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .pirRequest(v)
        }
      }()
      case 3: try {
        var v: Apple_SwiftHomomorphicEncryption_Api_Pnns_V1_PNNSRequest?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .pnnsRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .pnnsRequest(v)
        }
      }()
      case 4: try {
        var v: Apple_SwiftHomomorphicEncryption_Api_Pir_V1_OPRFRequest?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .oprfRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .oprfRequest(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.usecase.isEmpty {
      try visitor.visitSingularStringField(value: self.usecase, fieldNumber: 1)
    }
    switch self.request {
    case .pirRequest?: try {
      guard case .pirRequest(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .pnnsRequest?: try {
      guard case .pnnsRequest(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .oprfRequest?: try {
      guard case .oprfRequest(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Apple_SwiftHomomorphicEncryption_Api_V1_Request, rhs: Apple_SwiftHomomorphicEncryption_Api_V1_Request) -> Bool {
    if lhs.usecase != rhs.usecase {return false}
    if lhs.request != rhs.request {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apple_SwiftHomomorphicEncryption_Api_V1_Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Response"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pir_response"),
    2: .standard(proto: "pnns_response"),
    3: .standard(proto: "oprf_response"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Apple_SwiftHomomorphicEncryption_Api_Pir_V1_PIRResponse?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .pirResponse(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .pirResponse(v)
        }
      }()
      case 2: try {
        var v: Apple_SwiftHomomorphicEncryption_Api_Pnns_V1_PNNSResponse?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .pnnsResponse(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .pnnsResponse(v)
        }
      }()
      case 3: try {
        var v: Apple_SwiftHomomorphicEncryption_Api_Pir_V1_OPRFResponse?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .oprfResponse(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .oprfResponse(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.response {
    case .pirResponse?: try {
      guard case .pirResponse(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .pnnsResponse?: try {
      guard case .pnnsResponse(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .oprfResponse?: try {
      guard case .oprfResponse(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Apple_SwiftHomomorphicEncryption_Api_V1_Response, rhs: Apple_SwiftHomomorphicEncryption_Api_V1_Response) -> Bool {
    if lhs.response != rhs.response {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apple_SwiftHomomorphicEncryption_Api_V1_Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Error"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "config_version_not_found"),
    2: .standard(proto: "evaluation_key_not_found"),
    3: .standard(proto: "invalid_request"),
    4: .standard(proto: "internal_error"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Apple_SwiftHomomorphicEncryption_Api_V1_Error.ConfigVersionNotFound?
        var hadOneofValue = false
        if let current = self.errorType {
          hadOneofValue = true
          if case .configVersionNotFound(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.errorType = .configVersionNotFound(v)
        }
      }()
      case 2: try {
        var v: Apple_SwiftHomomorphicEncryption_Api_V1_Error.EvaluationKeyNotFound?
        var hadOneofValue = false
        if let current = self.errorType {
          hadOneofValue = true
          if case .evaluationKeyNotFound(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.errorType = .evaluationKeyNotFound(v)
        }
      }()
      case 3: try {
        var v: Apple_SwiftHomomorphicEncryption_Api_V1_Error.InvalidRequest?
        var hadOneofValue = false
        if let current = self.errorType {
          hadOneofValue = true
          if case .invalidRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.errorType = .invalidRequest(v)
        }
      }()
      case 4: try {
        var v: Apple_SwiftHomomorphicEncryption_Api_V1_Error.InternalError?
        var hadOneofValue = false
        if let current = self.errorType {
          hadOneofValue = true
          if case .internalError(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.errorType = .internalError(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.errorType {
    case .configVersionNotFound?: try {
      guard case .configVersionNotFound(let v)? = self.errorType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .evaluationKeyNotFound?: try {
      guard case .evaluationKeyNotFound(let v)? = self.errorType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .invalidRequest?: try {
      guard case .invalidRequest(let v)? = self.errorType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .internalError?: try {
      guard case .internalError(let v)? = self.errorType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Apple_SwiftHomomorphicEncryption_Api_V1_Error, rhs: Apple_SwiftHomomorphicEncryption_Api_V1_Error) -> Bool {
    if lhs.errorType != rhs.errorType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apple_SwiftHomomorphicEncryption_Api_V1_Error.ConfigVersionNotFound: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Apple_SwiftHomomorphicEncryption_Api_V1_Error.protoMessageName + ".ConfigVersionNotFound"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "config_response"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._configResponse) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._configResponse {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Apple_SwiftHomomorphicEncryption_Api_V1_Error.ConfigVersionNotFound, rhs: Apple_SwiftHomomorphicEncryption_Api_V1_Error.ConfigVersionNotFound) -> Bool {
    if lhs._configResponse != rhs._configResponse {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apple_SwiftHomomorphicEncryption_Api_V1_Error.EvaluationKeyNotFound: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Apple_SwiftHomomorphicEncryption_Api_V1_Error.protoMessageName + ".EvaluationKeyNotFound"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Apple_SwiftHomomorphicEncryption_Api_V1_Error.EvaluationKeyNotFound, rhs: Apple_SwiftHomomorphicEncryption_Api_V1_Error.EvaluationKeyNotFound) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apple_SwiftHomomorphicEncryption_Api_V1_Error.InvalidRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Apple_SwiftHomomorphicEncryption_Api_V1_Error.protoMessageName + ".InvalidRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Apple_SwiftHomomorphicEncryption_Api_V1_Error.InvalidRequest, rhs: Apple_SwiftHomomorphicEncryption_Api_V1_Error.InvalidRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apple_SwiftHomomorphicEncryption_Api_V1_Error.InternalError: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Apple_SwiftHomomorphicEncryption_Api_V1_Error.protoMessageName + ".InternalError"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Apple_SwiftHomomorphicEncryption_Api_V1_Error.InternalError, rhs: Apple_SwiftHomomorphicEncryption_Api_V1_Error.InternalError) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
