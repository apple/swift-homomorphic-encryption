// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: apple/swift_homomorphic_encryption/pnns/v1/pnns_client_config.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2024 Apple Inc. and the Swift Homomorphic Encryption project authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import SwiftProtobuf

import HomomorphicEncryptionProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// The client configuration.
public struct Apple_SwiftHomomorphicEncryption_Pnns_V1_ClientConfig: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Encryption parameters.
  public var encryptionParameters: HomomorphicEncryptionProtobuf.Apple_SwiftHomomorphicEncryption_V1_EncryptionParameters {
    get {return _encryptionParameters ?? HomomorphicEncryptionProtobuf.Apple_SwiftHomomorphicEncryption_V1_EncryptionParameters()}
    set {_encryptionParameters = newValue}
  }
  /// Returns true if `encryptionParameters` has been explicitly set.
  public var hasEncryptionParameters: Bool {return self._encryptionParameters != nil}
  /// Clears the value of `encryptionParameters`. Subsequent reads from it will return its default value.
  public mutating func clearEncryptionParameters() {self._encryptionParameters = nil}

  /// Factor by which to scale floating-point entries before rounding to integers.
  public var scalingFactor: UInt64 = 0

  /// Packing for the query.
  public var queryPacking: Apple_SwiftHomomorphicEncryption_Pnns_V1_MatrixPacking {
    get {return _queryPacking ?? Apple_SwiftHomomorphicEncryption_Pnns_V1_MatrixPacking()}
    set {_queryPacking = newValue}
  }
  /// Returns true if `queryPacking` has been explicitly set.
  public var hasQueryPacking: Bool {return self._queryPacking != nil}
  /// Clears the value of `queryPacking`. Subsequent reads from it will return its default value.
  public mutating func clearQueryPacking() {self._queryPacking = nil}

  /// Number of entries in each vector.
  public var vectorDimension: UInt32 = 0

  /// Galois elements required for nearest neighbor search.
  public var galoisElements: [UInt32] = []

  /// Metric for distances between vectors.
  public var distanceMetric: Apple_SwiftHomomorphicEncryption_Pnns_V1_DistanceMetric = .cosineSimilarity

  /// For plaintext CRT, the list of extra plaintext moduli.
  /// The first plaintext modulus will be the one in `encryption_parameters`.
  public var extraPlaintextModuli: [UInt64] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _encryptionParameters: HomomorphicEncryptionProtobuf.Apple_SwiftHomomorphicEncryption_V1_EncryptionParameters? = nil
  fileprivate var _queryPacking: Apple_SwiftHomomorphicEncryption_Pnns_V1_MatrixPacking? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "apple.swift_homomorphic_encryption.pnns.v1"

extension Apple_SwiftHomomorphicEncryption_Pnns_V1_ClientConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClientConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "encryption_parameters"),
    2: .standard(proto: "scaling_factor"),
    3: .standard(proto: "query_packing"),
    4: .standard(proto: "vector_dimension"),
    5: .standard(proto: "galois_elements"),
    6: .standard(proto: "distance_metric"),
    7: .standard(proto: "extra_plaintext_moduli"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._encryptionParameters) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.scalingFactor) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._queryPacking) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.vectorDimension) }()
      case 5: try { try decoder.decodeRepeatedUInt32Field(value: &self.galoisElements) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.distanceMetric) }()
      case 7: try { try decoder.decodeRepeatedUInt64Field(value: &self.extraPlaintextModuli) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._encryptionParameters {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.scalingFactor != 0 {
      try visitor.visitSingularUInt64Field(value: self.scalingFactor, fieldNumber: 2)
    }
    try { if let v = self._queryPacking {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if self.vectorDimension != 0 {
      try visitor.visitSingularUInt32Field(value: self.vectorDimension, fieldNumber: 4)
    }
    if !self.galoisElements.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.galoisElements, fieldNumber: 5)
    }
    if self.distanceMetric != .cosineSimilarity {
      try visitor.visitSingularEnumField(value: self.distanceMetric, fieldNumber: 6)
    }
    if !self.extraPlaintextModuli.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.extraPlaintextModuli, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Apple_SwiftHomomorphicEncryption_Pnns_V1_ClientConfig, rhs: Apple_SwiftHomomorphicEncryption_Pnns_V1_ClientConfig) -> Bool {
    if lhs._encryptionParameters != rhs._encryptionParameters {return false}
    if lhs.scalingFactor != rhs.scalingFactor {return false}
    if lhs._queryPacking != rhs._queryPacking {return false}
    if lhs.vectorDimension != rhs.vectorDimension {return false}
    if lhs.galoisElements != rhs.galoisElements {return false}
    if lhs.distanceMetric != rhs.distanceMetric {return false}
    if lhs.extraPlaintextModuli != rhs.extraPlaintextModuli {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
