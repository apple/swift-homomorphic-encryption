// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: apple/swift_homomorphic_encryption/pnns/v1/pnns_matrix_packing.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2024 Apple Inc. and the Swift Homomorphic Encryption project authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Pre-computed values for matrix-vector multiplication using baby-step, giant-step algorithm.
/// See Section 6.3 of <https://eprint.iacr.org/2018/244.pdf>.
public struct Apple_SwiftHomomorphicEncryption_Pnns_V1_BabyStepGiantStep: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Dimension of the vector; "D" in the reference.
  public var vectorDimension: UInt32 = 0

  /// Baby step; "g" in the reference.
  public var babyStep: UInt32 = 0

  /// Giant step; "h" in the reference.
  public var giantStep: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Different algorithms for packing a matrix of scalar values into plaintexts / ciphertexts.
public struct Apple_SwiftHomomorphicEncryption_Pnns_V1_MatrixPacking: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Different packing formats.
  public var plaintextPackingType: Apple_SwiftHomomorphicEncryption_Pnns_V1_MatrixPacking.OneOf_PlaintextPackingType? = nil

  /// Dense row packing.
  public var denseRow: Apple_SwiftHomomorphicEncryption_Pnns_V1_MatrixPackingDenseRow {
    get {
      if case .denseRow(let v)? = plaintextPackingType {return v}
      return Apple_SwiftHomomorphicEncryption_Pnns_V1_MatrixPackingDenseRow()
    }
    set {plaintextPackingType = .denseRow(newValue)}
  }

  //// Packs the values using a generalized diagonal packing.
  ////
  //// Includes modifications for the baby-step, giant-step algorithm from Section 6.3 of
  //// <https://eprint.iacr.org/2018/244.pdf>.
  public var diagonal: Apple_SwiftHomomorphicEncryption_Pnns_V1_MatrixPackingDiagonal {
    get {
      if case .diagonal(let v)? = plaintextPackingType {return v}
      return Apple_SwiftHomomorphicEncryption_Pnns_V1_MatrixPackingDiagonal()
    }
    set {plaintextPackingType = .diagonal(newValue)}
  }

  //// As many rows of data are packed sequentially into each SIMD plaintext
  //// row as possible, such that no data row is split across multiple SIMD rows, and
  //// each data row is zero-padded to the next power of two length.
  //// The rows in the final plaintext are repeated as many times as possible within the plaintext,
  //// with the constraint that either all or none of the entries stored within the last plaintext
  //// row are repeated.
  public var denseColumn: Apple_SwiftHomomorphicEncryption_Pnns_V1_MatrixPackingDenseColumn {
    get {
      if case .denseColumn(let v)? = plaintextPackingType {return v}
      return Apple_SwiftHomomorphicEncryption_Pnns_V1_MatrixPackingDenseColumn()
    }
    set {plaintextPackingType = .denseColumn(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Different packing formats.
  public enum OneOf_PlaintextPackingType: Equatable, Sendable {
    /// Dense row packing.
    case denseRow(Apple_SwiftHomomorphicEncryption_Pnns_V1_MatrixPackingDenseRow)
    //// Packs the values using a generalized diagonal packing.
    ////
    //// Includes modifications for the baby-step, giant-step algorithm from Section 6.3 of
    //// <https://eprint.iacr.org/2018/244.pdf>.
    case diagonal(Apple_SwiftHomomorphicEncryption_Pnns_V1_MatrixPackingDiagonal)
    //// As many rows of data are packed sequentially into each SIMD plaintext
    //// row as possible, such that no data row is split across multiple SIMD rows, and
    //// each data row is zero-padded to the next power of two length.
    //// The rows in the final plaintext are repeated as many times as possible within the plaintext,
    //// with the constraint that either all or none of the entries stored within the last plaintext
    //// row are repeated.
    case denseColumn(Apple_SwiftHomomorphicEncryption_Pnns_V1_MatrixPackingDenseColumn)

  }

  public init() {}
}

/// As many rows of data are packed sequentially into each SIMD row as possible,
/// such that no data row is split across multiple SIMD rows, and
/// each data row is zero-padded to the next power of two length.
/// The rows in the final plaintext/ciphertext are repeated as many times as possible within the plaintext/ciphertext,
/// with the constraint that either all or none of the entries stored within the last plaintext/ciphertext
/// row are repeated.
public struct Apple_SwiftHomomorphicEncryption_Pnns_V1_MatrixPackingDenseRow: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Packs the values using a generalized diagonal packing.
public struct Apple_SwiftHomomorphicEncryption_Pnns_V1_MatrixPackingDiagonal: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Diagonals are rotated according to the baby-step, giant-step algorithm from Section 6.3 of <https://eprint.iacr.org/2018/244.pdf>.
  public var babyStepGiantStep: Apple_SwiftHomomorphicEncryption_Pnns_V1_BabyStepGiantStep {
    get {return _babyStepGiantStep ?? Apple_SwiftHomomorphicEncryption_Pnns_V1_BabyStepGiantStep()}
    set {_babyStepGiantStep = newValue}
  }
  /// Returns true if `babyStepGiantStep` has been explicitly set.
  public var hasBabyStepGiantStep: Bool {return self._babyStepGiantStep != nil}
  /// Clears the value of `babyStepGiantStep`. Subsequent reads from it will return its default value.
  public mutating func clearBabyStepGiantStep() {self._babyStepGiantStep = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _babyStepGiantStep: Apple_SwiftHomomorphicEncryption_Pnns_V1_BabyStepGiantStep? = nil
}

/// As many columns of data are packed sequentially into each SIMD row as possible, such that no SIMD row
/// contains data from multiple columns.
public struct Apple_SwiftHomomorphicEncryption_Pnns_V1_MatrixPackingDenseColumn: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "apple.swift_homomorphic_encryption.pnns.v1"

extension Apple_SwiftHomomorphicEncryption_Pnns_V1_BabyStepGiantStep: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BabyStepGiantStep"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "vector_dimension"),
    2: .standard(proto: "baby_step"),
    3: .standard(proto: "giant_step"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.vectorDimension) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.babyStep) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.giantStep) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.vectorDimension != 0 {
      try visitor.visitSingularUInt32Field(value: self.vectorDimension, fieldNumber: 1)
    }
    if self.babyStep != 0 {
      try visitor.visitSingularUInt32Field(value: self.babyStep, fieldNumber: 2)
    }
    if self.giantStep != 0 {
      try visitor.visitSingularUInt32Field(value: self.giantStep, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Apple_SwiftHomomorphicEncryption_Pnns_V1_BabyStepGiantStep, rhs: Apple_SwiftHomomorphicEncryption_Pnns_V1_BabyStepGiantStep) -> Bool {
    if lhs.vectorDimension != rhs.vectorDimension {return false}
    if lhs.babyStep != rhs.babyStep {return false}
    if lhs.giantStep != rhs.giantStep {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apple_SwiftHomomorphicEncryption_Pnns_V1_MatrixPacking: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MatrixPacking"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "dense_row"),
    2: .same(proto: "diagonal"),
    3: .standard(proto: "dense_column"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Apple_SwiftHomomorphicEncryption_Pnns_V1_MatrixPackingDenseRow?
        var hadOneofValue = false
        if let current = self.plaintextPackingType {
          hadOneofValue = true
          if case .denseRow(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.plaintextPackingType = .denseRow(v)
        }
      }()
      case 2: try {
        var v: Apple_SwiftHomomorphicEncryption_Pnns_V1_MatrixPackingDiagonal?
        var hadOneofValue = false
        if let current = self.plaintextPackingType {
          hadOneofValue = true
          if case .diagonal(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.plaintextPackingType = .diagonal(v)
        }
      }()
      case 3: try {
        var v: Apple_SwiftHomomorphicEncryption_Pnns_V1_MatrixPackingDenseColumn?
        var hadOneofValue = false
        if let current = self.plaintextPackingType {
          hadOneofValue = true
          if case .denseColumn(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.plaintextPackingType = .denseColumn(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.plaintextPackingType {
    case .denseRow?: try {
      guard case .denseRow(let v)? = self.plaintextPackingType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .diagonal?: try {
      guard case .diagonal(let v)? = self.plaintextPackingType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .denseColumn?: try {
      guard case .denseColumn(let v)? = self.plaintextPackingType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Apple_SwiftHomomorphicEncryption_Pnns_V1_MatrixPacking, rhs: Apple_SwiftHomomorphicEncryption_Pnns_V1_MatrixPacking) -> Bool {
    if lhs.plaintextPackingType != rhs.plaintextPackingType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apple_SwiftHomomorphicEncryption_Pnns_V1_MatrixPackingDenseRow: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MatrixPackingDenseRow"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Apple_SwiftHomomorphicEncryption_Pnns_V1_MatrixPackingDenseRow, rhs: Apple_SwiftHomomorphicEncryption_Pnns_V1_MatrixPackingDenseRow) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apple_SwiftHomomorphicEncryption_Pnns_V1_MatrixPackingDiagonal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MatrixPackingDiagonal"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "baby_step_giant_step"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularMessageField(value: &self._babyStepGiantStep) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._babyStepGiantStep {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Apple_SwiftHomomorphicEncryption_Pnns_V1_MatrixPackingDiagonal, rhs: Apple_SwiftHomomorphicEncryption_Pnns_V1_MatrixPackingDiagonal) -> Bool {
    if lhs._babyStepGiantStep != rhs._babyStepGiantStep {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apple_SwiftHomomorphicEncryption_Pnns_V1_MatrixPackingDenseColumn: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MatrixPackingDenseColumn"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Apple_SwiftHomomorphicEncryption_Pnns_V1_MatrixPackingDenseColumn, rhs: Apple_SwiftHomomorphicEncryption_Pnns_V1_MatrixPackingDenseColumn) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
