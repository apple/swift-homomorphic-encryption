// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: apple/swift_homomorphic_encryption/pnns/v1/pnns_processed_database.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2024 Apple Inc. and the Swift Homomorphic Encryption project authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Serialized pre-processed nearest neighbors database.
public struct Apple_SwiftHomomorphicEncryption_Pnns_V1_SerializedProcessedDatabase: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Pre-computed values for the nearest neighbors computation, one per plaintext CRT modulus.
  public var plaintextMatrices: [Apple_SwiftHomomorphicEncryption_Pnns_V1_SerializedPlaintextMatrix] = []

  /// Unique identifier for each entry in the database.
  public var entryIds: [UInt64] = []

  /// Metadata for each entry in the database.
  public var entryMetadatas: [Data] = []

  /// Configuration used to create the database.
  public var serverConfig: Apple_SwiftHomomorphicEncryption_Pnns_V1_ServerConfig {
    get {return _serverConfig ?? Apple_SwiftHomomorphicEncryption_Pnns_V1_ServerConfig()}
    set {_serverConfig = newValue}
  }
  /// Returns true if `serverConfig` has been explicitly set.
  public var hasServerConfig: Bool {return self._serverConfig != nil}
  /// Clears the value of `serverConfig`. Subsequent reads from it will return its default value.
  public mutating func clearServerConfig() {self._serverConfig = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _serverConfig: Apple_SwiftHomomorphicEncryption_Pnns_V1_ServerConfig? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "apple.swift_homomorphic_encryption.pnns.v1"

extension Apple_SwiftHomomorphicEncryption_Pnns_V1_SerializedProcessedDatabase: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SerializedProcessedDatabase"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "plaintext_matrices"),
    2: .standard(proto: "entry_ids"),
    3: .standard(proto: "entry_metadatas"),
    4: .standard(proto: "server_config"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.plaintextMatrices) }()
      case 2: try { try decoder.decodeRepeatedUInt64Field(value: &self.entryIds) }()
      case 3: try { try decoder.decodeRepeatedBytesField(value: &self.entryMetadatas) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._serverConfig) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.plaintextMatrices.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.plaintextMatrices, fieldNumber: 1)
    }
    if !self.entryIds.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.entryIds, fieldNumber: 2)
    }
    if !self.entryMetadatas.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.entryMetadatas, fieldNumber: 3)
    }
    try { if let v = self._serverConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Apple_SwiftHomomorphicEncryption_Pnns_V1_SerializedProcessedDatabase, rhs: Apple_SwiftHomomorphicEncryption_Pnns_V1_SerializedProcessedDatabase) -> Bool {
    if lhs.plaintextMatrices != rhs.plaintextMatrices {return false}
    if lhs.entryIds != rhs.entryIds {return false}
    if lhs.entryMetadatas != rhs.entryMetadatas {return false}
    if lhs._serverConfig != rhs._serverConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
