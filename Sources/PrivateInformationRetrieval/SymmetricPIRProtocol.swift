// Copyright 2025 Apple Inc. and the Swift Homomorphic Encryption project authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import _CryptoExtras
import Crypto
import Foundation
import HomomorphicEncryption

/// Response of OPRF server evaluation.
public typealias OprfResponse = P384._VOPRF.BlindEvaluation
/// Context for client OPRF query.
public typealias OprfQueryContext = P384._VOPRF.BlindedInput
/// OPRF query generated by client.
public typealias OprfQuery = P384._VOPRF.BlindedElement
/// Private key used by OPRF server.
public typealias OprfPrivateKey = P384._VOPRF.PrivateKey
/// Public key used by OPRF server.
public typealias OprfPublicKey = P384._VOPRF.PublicKey

extension OprfQueryContext {
    /// OPRF query for server evaluation.
    public var query: OprfQuery {
        blindedElement
    }
}

/// A server that computes OPRF for Symmetric PIR.
public struct OprfServer {
    /// OPRF secret key.
    let oprfPrivateKey: OprfPrivateKey

    /// Initializes ``OprfServer`` with given ``SymmetricPirConfig``
    /// - Parameter symmetricPirConfig: Config for OPRF server.
    /// - Throws: Error on failure to initialize.
    public init(symmetricPirConfig: SymmetricPirConfig) throws {
        guard case .OPRF_P384_AES_GCM_192_NONCE_96_TAG_128 = symmetricPirConfig.configType else {
            throw PirError.invalidSymmetricPirConfig(symmetricPirConfig: symmetricPirConfig)
        }
        self.oprfPrivateKey = try OprfPrivateKey(rawRepresentation: symmetricPirConfig.oprfSecretKey)
    }

    /// Compute OPRF response.
    /// - Parameter blindedElement: Input to evaluate OPRF on.
    /// - Returns: OPRF response on evaluating `query`.
    /// - Throws: Error on failure to evaluate OPRF.
    public func computeResponse(query blindedElement: OprfQuery) throws -> OprfResponse {
        try oprfPrivateKey.evaluate(blindedElement)
    }
}

/// A client for ``OprfServer``.
public struct OprfClient {
    /// Struct representing parsed OPRF output.
    public struct ParsedOprfOutput: Equatable {
        /// Oblivious keyword corresponding to plain keyword.
        public let obliviousKeyword: [UInt8]
        /// Nonce used in encrypting keyword database row.
        public let nonce: [UInt8]
        /// Secret key used for encrypting keyword database row.
        public let secretKey: [UInt8]

        /// Parse OPRF output.
        /// - Parameters:
        ///   - oprfOutput: Finalized result of OPRF evaluation.
        ///   - configType: Symmetric PIR config type.
        public init(oprfOutput: [UInt8], configType: SymmetricPirConfigType) {
            self.obliviousKeyword = [UInt8](oprfOutput.prefix(Int(configType.obliviousKeywordSize)))
            self.nonce = [UInt8](oprfOutput.prefix(configType.nonceSize))
            self.secretKey = [UInt8](oprfOutput.suffix(configType.entryEncryptionKeySize))
        }
    }

    /// Public key used to initialize OPRF server.
    let oprfPublicKey: OprfPublicKey

    /// Symmetric PIR config type.
    let configType: SymmetricPirConfigType

    /// Initializes ``OprfClient`` using given``SymmetricPirClientConfig``.
    /// - Parameter symmetricPirClientConfig: Config for OPRF client.
    /// - Throws: Error on failure to initialize.
    public init(symmetricPirClientConfig: SymmetricPirClientConfig) throws {
        self.oprfPublicKey = try OprfPublicKey(compressedRepresentation: symmetricPirClientConfig.serverPublicKey)
        self.configType = symmetricPirClientConfig.configType
    }

    /// Generate OPRF query for a keyword.
    /// - Parameter keyword: Query keyword.
    /// - Returns: Query context for input keyword.
    /// - Throws: Error on computing context.
    public func queryContext(at keyword: [UInt8]) throws -> OprfQueryContext {
        try oprfPublicKey.blind(keyword)
    }

    /// Parses output of OPRF evaluation.
    /// - Parameters:
    ///   - blindEvaluation: OPRF response from server.
    ///   - blindedInput: OPRF query context.
    /// - Returns: Parsed output.
    /// - Throws: Error on parsing failure.
    public func parse(oprfResponse blindEvaluation: OprfResponse,
                      with blindedInput: OprfQueryContext) throws -> ParsedOprfOutput
    {
        let output = try [UInt8](oprfPublicKey.finalize(blindedInput, using: blindEvaluation))
        return ParsedOprfOutput(oprfOutput: output, configType: configType)
    }

    /// Decrypt Symmetric PIR encrypted entry.
    /// - Parameters:
    ///   - encryptedEntry: Encrypted entry.
    ///   - parsedOprfOutput: Parsed OPRF output.
    /// - Returns: Decrypted entry.
    /// - Throws: Error on parsing or decryption failure.
    public func decrypt(encryptedEntry: [UInt8], with parsedOprfOutput: ParsedOprfOutput) throws -> [UInt8] {
        let entryEncryptionSecretKey = SymmetricKey(data: parsedOprfOutput.secretKey)
        let entryEncryptionNonce = try AES.GCM.Nonce(data: parsedOprfOutput.nonce)
        let ciphertext = encryptedEntry.dropLast(configType.tagSize)
        let tag = encryptedEntry.suffix(configType.tagSize)
        let sealedBox = try AES.GCM.SealedBox(nonce: entryEncryptionNonce, ciphertext: ciphertext, tag: tag)
        return try [UInt8](AES.GCM.open(sealedBox, using: entryEncryptionSecretKey))
    }
}
